use keyboard_types::Code;

pub fn key_event_to_keyboard_type_code(code: u16) -> Code {
    // Codes from Events.h  
    match code {
        0x00 => Code::KeyA, // kVK_ANSI_A
        0x01 => Code::KeyS, // kVK_ANSI_S
        0x02 => Code::KeyD, // kVK_ANSI_D
        0x03 => Code::KeyF, // kVK_ANSI_F
        0x04 => Code::KeyH, // kVK_ANSI_H
        0x05 => Code::KeyG, // kVK_ANSI_G
        0x06 => Code::KeyZ, // kVK_ANSI_Z
        0x07 => Code::KeyX, // kVK_ANSI_X
        0x08 => Code::KeyC, // kVK_ANSI_C
        0x09 => Code::KeyV, // kVK_ANSI_V
        0x0B => Code::KeyB, // kVK_ANSI_B
        0x0C => Code::KeyQ, // kVK_ANSI_Q
        0x0D => Code::KeyW, // kVK_ANSI_W
        0x0E => Code::KeyE, // kVK_ANSI_E
        0x0F => Code::KeyR, // kVK_ANSI_R
        0x10 => Code::KeyY, // kVK_ANSI_Y
        0x11 => Code::KeyT, // kVK_ANSI_T
        0x12 => Code::Digit1, // kVK_ANSI_1
        0x13 => Code::Digit2, // kVK_ANSI_2
        0x14 => Code::Digit3, // kVK_ANSI_3
        0x15 => Code::Digit4, // kVK_ANSI_4
        0x16 => Code::Digit6, // kVK_ANSI_6
        0x17 => Code::Digit5, // kVK_ANSI_5
        0x18 => Code::Equal, // kVK_ANSI_Equal
        0x19 => Code::Digit9, // kVK_ANSI_9
        0x1A => Code::Digit7, // kVK_ANSI_7
        0x1B => Code::Minus, // kVK_ANSI_Minus
        0x1C => Code::Digit8, // kVK_ANSI_8
        0x1D => Code::Digit0, // kVK_ANSI_0
        0x1E => Code::BracketRight, // kVK_ANSI_RightBracket
        0x1F => Code::KeyO, // kVK_ANSI_O
        0x20 => Code::KeyU, // kVK_ANSI_U
        0x21 => Code::BracketLeft, // kVK_ANSI_LeftBracket
        0x22 => Code::KeyI, // kVK_ANSI_I
        0x23 => Code::KeyP, // kVK_ANSI_P
        0x24 => Code::Enter, // kVK_Return
        0x25 => Code::KeyL, // kVK_ANSI_L
        0x26 => Code::KeyJ, // kVK_ANSI_J
        0x27 => Code::Quote, // kVK_ANSI_Quote
        0x28 => Code::KeyK, // kVK_ANSI_K
        0x29 => Code::Semicolon, // kVK_ANSI_Semicolon
        0x2A => Code::Backslash, // kVK_ANSI_Backslash
        0x2B => Code::Comma, // kVK_ANSI_Comma
        0x2C => Code::Slash, // kVK_ANSI_Slash
        0x2D => Code::KeyN, // kVK_ANSI_N
        0x2E => Code::KeyM, // kVK_ANSI_M
        0x2F => Code::Period, // kVK_ANSI_Period
        0x30 => Code::Tab, // kVK_Tab
        0x31 => Code::Space, // kVK_Space
        0x32 => Code::Backquote, // kVK_ANSI_Grave
        0x33 => Code::Backspace, // kVK_Delete
        0x35 => Code::Escape, // kVK_Escape
        0x36 => Code::MetaRight, // kVK_RightCommand
        0x37 => Code::MetaLeft, // kVK_Command
        0x38 => Code::ShiftLeft, // kVK_Shift
        0x39 => Code::CapsLock, // kVK_CapsLock
        0x3A => Code::AltLeft, // kVK_Option
        0x3B => Code::ControlLeft, // kVK_Control
        0x3C => Code::ShiftRight, // kVK_RightShift
        0x3D => Code::AltRight, // kVK_RightOption
        0x3E => Code::ControlRight, // kVK_RightControl
        0x3F => Code::Fn, // kVK_Function
        0x40 => Code::F17, // kVK_F17
        0x41 => Code::NumpadDecimal, // kVK_ANSI_KeypadDecimal
        0x43 => Code::NumpadMultiply, // kVK_ANSI_KeypadMultiply
        0x45 => Code::NumpadAdd, // kVK_ANSI_KeypadPlus
        0x47 => Code::NumpadClear, // kVK_ANSI_KeypadClear
        0x48 => Code::AudioVolumeUp, // kVK_VolumeUp
        0x49 => Code::AudioVolumeDown, // kVK_VolumeDown
        0x4A => Code::AudioVolumeMute, // kVK_Mute
        0x4B => Code::NumpadDivide, // kVK_ANSI_KeypadDivide
        0x4C => Code::NumpadEnter, // kVK_ANSI_KeypadEnter
        0x4E => Code::NumpadSubtract, // kVK_ANSI_KeypadMinus
        0x4F => Code::F18, // kVK_F18
        0x50 => Code::F19, // kVK_F19
        0x51 => Code::NumpadEqual, // kVK_ANSI_KeypadEquals
        0x52 => Code::Numpad0, // kVK_ANSI_Keypad0
        0x53 => Code::Numpad1, // kVK_ANSI_Keypad1
        0x54 => Code::Numpad2, // kVK_ANSI_Keypad2
        0x55 => Code::Numpad3, // kVK_ANSI_Keypad3
        0x56 => Code::Numpad4, // kVK_ANSI_Keypad4
        0x57 => Code::Numpad5, // kVK_ANSI_Keypad5
        0x58 => Code::Numpad6, // kVK_ANSI_Keypad6
        0x59 => Code::Numpad7, // kVK_ANSI_Keypad7
        0x5A => Code::F20, // kVK_F20
        0x5B => Code::Numpad8, // kVK_ANSI_Keypad8
        0x5C => Code::Numpad9, // kVK_ANSI_Keypad9
        0x60 => Code::F5, // kVK_F5
        0x61 => Code::F6, // kVK_F6
        0x62 => Code::F7, // kVK_F7
        0x63 => Code::F3, // kVK_F3
        0x64 => Code::F8, // kVK_F8
        0x65 => Code::F9, // kVK_F9
        0x67 => Code::F11, // kVK_F11
        0x69 => Code::F13, // kVK_F13
        0x6A => Code::F16, // kVK_F16
        0x6B => Code::F14, // kVK_F14
        0x6D => Code::F10, // kVK_F10
        0x6E => Code::ContextMenu, // kVK_ContextualMenu
        0x6F => Code::F12, // kVK_F12
        0x71 => Code::F15, // kVK_F15
        0x72 => Code::Help, // kVK_Help
        0x73 => Code::Home, // kVK_Home
        0x74 => Code::PageUp, // kVK_PageUp
        0x75 => Code::Delete, // kVK_ForwardDelete
        0x76 => Code::F4, // kVK_F4
        0x77 => Code::End, // kVK_End
        0x78 => Code::F2, // kVK_F2
        0x79 => Code::PageDown, // kVK_PageDown
        0x7A => Code::F1, // kVK_F1
        0x7B => Code::ArrowLeft, // kVK_LeftArrow
        0x7C => Code::ArrowRight, // kVK_RightArrow
        0x7D => Code::ArrowDown, // kVK_DownArrow
        0x7E => Code::ArrowUp, // kVK_UpArrow

        _ => Code::Unidentified,
    }  
}
